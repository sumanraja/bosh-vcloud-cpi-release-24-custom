<%=

  params = {
    "cloud" => {
      "plugin" => "vcloud",
      "properties" => {
        "vcds" => [
          {
            "url" => p('vcd.url'),
            "user" => p('vcd.user'),
            "password" => p('vcd.password'),
            "entities" => {
              "organization" => p('vcd.entities.organization'),
              "virtual_datacenter" => p('vcd.entities.virtual_datacenter'),
              "vapp_catalog" => p('vcd.entities.vapp_catalog'),
              "media_catalog" => p('vcd.entities.media_catalog'),
              "media_storage_profile" => p('vcd.entities.media_storage_profile'),
              "vapp_storage_profile" => p('vcd.entities.vapp_storage_profile', nil),
              "vm_metadata_key" => p('vcd.entities.vm_metadata_key'),
              "description" => p('vcd.entities.description')
            }
          }
        ],
        "agent" => {
          "ntp" => p('agent.ntp')
        }
      }
    }
  }

  if_p('vcd.control.wait_max') do |wait_max|
    params["cloud"]["properties"]["vcds"].each do |vcd|
      vcd["entities"]["control"] = { "wait_max" => wait_max }
    end
  end

  if_p('blobstore') do
    params["cloud"]["properties"]["agent"]["blobstore"] = {
      "provider" => p('blobstore.provider'),
      "options" => {}
    }

    if p('blobstore.provider') == "s3"
      params["cloud"]["properties"]["agent"]["blobstore"]["options"] = {
        "bucket_name" => p('blobstore.bucket_name'),
        "access_key_id" => p(['agent.blobstore.access_key_id', 'blobstore.access_key_id']),
        "secret_access_key" => p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key'])
      }

      blobstore_options = params['cloud']['properties']['agent']['blobstore']['options']

      def update_blobstore_options(options, manifest_key, rendered_key=manifest_key)
        value = p(["agent.blobstore.#{manifest_key}", "blobstore.#{manifest_key}"], nil)
        options[rendered_key] = value unless value.nil?
      end

      update_blobstore_options(blobstore_options, 'use_ssl')
      update_blobstore_options(blobstore_options, 's3_port', 'port')
      update_blobstore_options(blobstore_options, 'host')
      update_blobstore_options(blobstore_options, 's3_force_path_style')
      update_blobstore_options(blobstore_options, 'ssl_verify_peer')
      update_blobstore_options(blobstore_options, 's3_multipart_threshold')
      update_blobstore_options(blobstore_options, 's3_signature_version', 'signature_version')
      update_blobstore_options(blobstore_options, 's3_region', 'region')

    elsif p('blobstore.provider') == 'local'
      params["cloud"]["properties"]["agent"]["blobstore"]["options"] = {
        "blobstore_path" => p('blobstore.path')
      }
    else
      params["cloud"]["properties"]["agent"]["blobstore"]["options"] = {
        "endpoint" => "http://#{p(['agent.blobstore.address', 'blobstore.address'])}:#{p('blobstore.port')}",
        "user" => p('blobstore.agent.user'),
        "password" => p('blobstore.agent.password')
      }
    end
  end

  if_p('agent.mbus') do |mbus|
    params["cloud"]["properties"]["agent"]["mbus"] = mbus
  end.else_if_p('nats') do
    params["cloud"]["properties"]["agent"]["mbus"] = "nats://#{p('nats.user')}:#{p('nats.password')}@#{p(['agent.nats.address', 'nats.address'])}:#{p('nats.port')}"
  end

  JSON.dump(params)

%>
